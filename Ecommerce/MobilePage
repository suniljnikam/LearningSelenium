package pageFactory;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;

public class MobilePage {

	WebDriver driver;

	// find out of web elements that you need from this web page

	@FindBy(xpath = "//*[@id='top']/body/div/div/div[2]/div/div[2]/div[1]/div[3]/div[1]/div[1]/div/select")
	WebElement sortByDrpDwn;

	@FindBy(id = "product-collection-image-1")
	WebElement linkToSonyXperia;

	@FindBy(xpath = "//*[@id='product-price-1']/span")
	WebElement sonyXperiaPrice;

	// storing list of all products in a web element
	@FindBy(xpath = "//h2[@class='product-name']/a")
	List<WebElement> productList;
	
	@FindBy(xpath="//*[@id='top']/body/div/div/div[2]/div/div[2]/div[1]/div[3]/ul/li[1]/div/div[3]/button")
	WebElement addToCartSony;
	
	@FindBy(xpath="//*[@id='top']/body/div/div/div[2]/div/div[2]/div[1]/div[3]/ul/li[1]/div/div[3]/ul/li[2]/a")
	WebElement compareBtnSony;
	
	@FindBy(xpath="//*[@id='top']/body/div/div/div[2]/div/div[2]/div[1]/div[3]/ul/li[2]/div/div[3]/ul/li[2]/a")
	WebElement compareBtnIPhone;
	
	@FindBy(xpath="//*[@id='top']/body/div/div/div[2]/div/div[3]/div[1]/div[2]/div/button")
	WebElement compareBtn;
	
	// calling constructor of page

	public MobilePage(WebDriver driver) {
		this.driver = driver;
		PageFactory.initElements(driver, this);
	}

	// writing functions

	public void sortByName() {
		Select drpDwn = new Select(sortByDrpDwn);
		drpDwn.selectByVisibleText("Name");
	}

	public void takeScreenshot() throws IOException {
		File f = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		FileUtils.copyFile(f,
				new File("P:\\Documents\\MyActualDocuments\\Selenium\\Evidences\\EcommerceMobilePage.jpg"));
	}

	public String[] retrieveProductNames() {
	
		String[] productName = new String[3];
		int i = 0;

		// traveling through product list to get text

		for (WebElement el : productList) {
			productName[i] = el.getText();
			System.out.println(" Product Name is " + productName[i]);
			i++;
		}
		return productName;

	}

	public void verifySorting(String array1[], String array2[]) {
		Assert.assertTrue(Arrays.equals(array1, array2),
				"sorting Test Case failed as Products haven't sorted Properly");

	}
	// XPath of price on mobile page
	public String getPriceOfSony() {
		return sonyXperiaPrice.getText();
	}
	
	public SonyXperiaDetailsPage clickOnSonyXperia()
	{
		linkToSonyXperia.click();
		return new SonyXperiaDetailsPage(driver);
		
	}
	public ShoppingCartPage goToCart()
	{
		addToCartSony.click();
		return new ShoppingCartPage(driver);
	}
	
	public void addToCompareSony()
	{
		compareBtnSony.click();
	}
	
	public void addToCompareIPhone()
	{
		compareBtnIPhone.click();
	}
	public CompareProductPage clickOnCompare()
	{
		compareBtn.click();
		return new CompareProductPage(driver);
	}


}
