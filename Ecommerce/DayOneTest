// verifying functionality of sort by selection box
package TestCases;

import org.testng.annotations.Test;

import pageFactory.EcommerceIndexPage;
import pageFactory.MobilePage;
import pageFactory.Util;

import org.testng.annotations.BeforeMethod;

import java.io.IOException;
import java.util.Arrays;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterMethod;

public class DayOneTest {
	
	WebDriver driver;
	EcommerceIndexPage objIndexPage;
	MobilePage objMobilePage;
  @Test
  public void dayOneTesting() throws IOException {
	  
	  // creation of objects of page factory classes needed for this test cases
	  
	  objIndexPage= new EcommerceIndexPage(driver);
	  objMobilePage= new MobilePage(driver);
	  
	  driver.get(Util.BASE_URL);
	  
	  // verifying title of index page 
	  System.out.println("Title of home page"+objIndexPage.getTitleOfPage(driver));
	  
	  // click on mobile link
	  objIndexPage.clickOnMobileLink(driver);
	  
	  // verifying title of mobile page
	  System.out.println("Title of home page"+objIndexPage.getTitleOfPage(driver));
	  
	  // logic : we will need two array; one will hold product names before sorting and  ->
	  //-> another will hold product names after sorting
	  // sort 1st unsorted array and if it equals second one 
	  // then it  mean second array is sorted and so products on screen
	  
	  String []unsorted = objMobilePage.retrieveProductNames(driver);
	  
	  // calling sort by function
	  objMobilePage.sortByName(driver);
	  objMobilePage.takeScreenshot(driver);
	  
	  String []sorted = objMobilePage.retrieveProductNames(driver);
	  Arrays.sort(unsorted);
	  
	  // verifying products are sorted or not
	  objMobilePage.verifySorting(sorted, unsorted);
	  System.out.println("Products are in sorted manner");
  }
  @BeforeMethod
  public void beforeMethod() {
	  driver=Util.setChromeProperties(driver);
  }

  @AfterMethod
  public void afterMethod() {
	  Util.closeBroswerSession(driver);
  }

}
